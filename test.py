import tensorflow as tf
import numpy as np
import os
from tensorflow.keras.preprocessing import image

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
model = tf.keras.models.load_model("my_model.h5")

# ‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå test
test_dir = "data/test"

# ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏≤‡∏Å test dataset
class_names = sorted(os.listdir(test_dir))  # ‡πÉ‡∏ä‡πâ sorted() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
print("Class Names:", class_names)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
img_height = 150
img_width = 150

def predict_image(img_path):
    """ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏ò, ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• """
    img = image.load_img(img_path, target_size=(img_height, img_width))
    img_array = image.img_to_array(img) / 255.0  # Normalize
    img_array = np.expand_dims(img_array, axis=0)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô batch (1, 150, 150, 3)

    # ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    predictions = model.predict(img_array)
    predicted_class = np.argmax(predictions)  # ‡∏î‡∏∂‡∏á index ‡∏Ç‡∏≠‡∏á class ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    confidence = np.max(predictions)  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à

    return class_names[predicted_class], confidence

# ‚úÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á test
for folder in class_names:
    folder_path = os.path.join(test_dir, folder)
    if not os.path.isdir(folder_path):
        continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå

    print(f"\nüîç Predicting images in folder: {folder}")
    
    for img_name in os.listdir(folder_path):
        img_path = os.path.join(folder_path, img_name)
        predicted_label, confidence = predict_image(img_path)
        
        print(f"üìå Image: {img_name} | Predicted: {predicted_label} | Confidence: {confidence:.2f}")
